OpenLayers.Control.LoadingPanel = OpenLayers.Class(OpenLayers.Control, { counter: 0, maximized: false, visible: true, initialize: function (e) { OpenLayers.Control.prototype.initialize.apply(this, [e]) }, setVisible: function (e) { this.visible = e; if (e) { OpenLayers.Element.show(this.div) } else { OpenLayers.Element.hide(this.div) } }, getVisible: function () { return this.visible }, hide: function () { this.setVisible(false) }, show: function () { this.setVisible(true) }, toggle: function () { this.setVisible(!this.getVisible()) }, addLayer: function (e) { if (e.layer) { e.layer.events.register("loadstart", this, this.increaseCounter); e.layer.events.register("loadend", this, this.decreaseCounter) } }, setMap: function (e) { OpenLayers.Control.prototype.setMap.apply(this, arguments); this.map.events.register("preaddlayer", this, this.addLayer); for (var t = 0; t < this.map.layers.length; t++) { var n = this.map.layers[t]; n.events.register("loadstart", this, this.increaseCounter); n.events.register("loadend", this, this.decreaseCounter) } }, increaseCounter: function () { this.counter++; if (this.counter > 0) { if (!this.maximized && this.visible) { this.maximizeControl() } } }, decreaseCounter: function () { if (this.counter > 0) { this.counter-- } if (this.counter == 0) { if (this.maximized && this.visible) { this.minimizeControl() } } }, draw: function () { OpenLayers.Control.prototype.draw.apply(this, arguments); return this.div }, minimizeControl: function (e) { this.div.style.display = "none"; this.div.style.width = "0px"; this.div.style.height = "0px"; this.maximized = false; if (e != null) { OpenLayers.Event.stop(e) } }, maximizeControl: function (e) { var t = this.map.getSize(); var n = t.w; var r = t.h; this.div.style.width = n + "px"; this.div.style.height = r + "px"; this.div.style.display = "block"; this.maximized = true; if (e != null) { OpenLayers.Event.stop(e) } }, destroy: function () { if (this.map) { this.map.events.unregister("preaddlayer", this, this.addLayer); if (this.map.layers) { for (var e = 0; e < this.map.layers.length; e++) { var t = this.map.layers[e]; t.events.unregister("loadstart", this, this.increaseCounter); t.events.unregister("loadend", this, this.decreaseCounter) } } } OpenLayers.Control.prototype.destroy.apply(this, arguments) }, CLASS_NAME: "OpenLayers.Control.LoadingPanel" })